"use strict";
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
Object.defineProperty(exports, "__esModule", { value: true });
exports.Transaction = exports.TokenBalance = exports.WalletAnalysis = exports.AnalyticsEvent = void 0;
const graph_ts_1 = require("@graphprotocol/graph-ts");
class AnalyticsEvent extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save AnalyticsEvent entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type AnalyticsEvent must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("AnalyticsEvent", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("AnalyticsEvent", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("AnalyticsEvent", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get user() {
        let value = this.get("user");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBytes();
        }
    }
    set user(value) {
        this.set("user", graph_ts_1.Value.fromBytes(value));
    }
    get data() {
        let value = this.get("data");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set data(value) {
        this.set("data", graph_ts_1.Value.fromString(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get blockNumber() {
        let value = this.get("blockNumber");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set blockNumber(value) {
        this.set("blockNumber", graph_ts_1.Value.fromBigInt(value));
    }
}
exports.AnalyticsEvent = AnalyticsEvent;
class WalletAnalysis extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save WalletAnalysis entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type WalletAnalysis must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("WalletAnalysis", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("WalletAnalysis", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("WalletAnalysis", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get wallet() {
        let value = this.get("wallet");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set wallet(value) {
        this.set("wallet", graph_ts_1.Value.fromString(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get balances() {
        let value = this.get("balances");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toStringArray();
        }
    }
    set balances(value) {
        this.set("balances", graph_ts_1.Value.fromStringArray(value));
    }
    get transactions() {
        let value = this.get("transactions");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toStringArray();
        }
    }
    set transactions(value) {
        this.set("transactions", graph_ts_1.Value.fromStringArray(value));
    }
}
exports.WalletAnalysis = WalletAnalysis;
class TokenBalance extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save TokenBalance entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type TokenBalance must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("TokenBalance", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("TokenBalance", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("TokenBalance", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get token() {
        let value = this.get("token");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set token(value) {
        this.set("token", graph_ts_1.Value.fromString(value));
    }
    get amount() {
        let value = this.get("amount");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigDecimal();
        }
    }
    set amount(value) {
        this.set("amount", graph_ts_1.Value.fromBigDecimal(value));
    }
    get analysis() {
        let value = this.get("analysis");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set analysis(value) {
        this.set("analysis", graph_ts_1.Value.fromString(value));
    }
}
exports.TokenBalance = TokenBalance;
class Transaction extends graph_ts_1.Entity {
    constructor(id) {
        super();
        this.set("id", graph_ts_1.Value.fromString(id));
    }
    save() {
        let id = this.get("id");
        assert(id != null, "Cannot save Transaction entity without an ID");
        if (id) {
            assert(id.kind == graph_ts_1.ValueKind.STRING, `Entities of type Transaction must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`);
            graph_ts_1.store.set("Transaction", id.toString(), this);
        }
    }
    static loadInBlock(id) {
        return changetype(graph_ts_1.store.get_in_block("Transaction", id));
    }
    static load(id) {
        return changetype(graph_ts_1.store.get("Transaction", id));
    }
    get id() {
        let value = this.get("id");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set id(value) {
        this.set("id", graph_ts_1.Value.fromString(value));
    }
    get hash() {
        let value = this.get("hash");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set hash(value) {
        this.set("hash", graph_ts_1.Value.fromString(value));
    }
    get timestamp() {
        let value = this.get("timestamp");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigInt();
        }
    }
    set timestamp(value) {
        this.set("timestamp", graph_ts_1.Value.fromBigInt(value));
    }
    get value() {
        let value = this.get("value");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toBigDecimal();
        }
    }
    set value(value) {
        this.set("value", graph_ts_1.Value.fromBigDecimal(value));
    }
    get analysis() {
        let value = this.get("analysis");
        if (!value || value.kind == graph_ts_1.ValueKind.NULL) {
            throw new Error("Cannot return null for a required field.");
        }
        else {
            return value.toString();
        }
    }
    set analysis(value) {
        this.set("analysis", graph_ts_1.Value.fromString(value));
    }
}
exports.Transaction = Transaction;
